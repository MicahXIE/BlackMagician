1. Dictionaries are unordered in Python. If you do care about the order of the entries, starting with Python 2.7 you can use collections.OrderedDict.

2. Construct OrderedCounter

from collections import OrderedDict, Counter

class OrderedCounter(Counter, OrderedDict):
    pass

3. sorted list based on second value then first value
d = [('B', 3), ('A', 2), ('A', 1), ('I', 1), ('J', 1)]
sorted(d,key=lambda x:(-x[1],x[0]))
Since your "values" are numeric, you can easily reverse the sort order by changing the sign.

If your values can't so easily be "negated" to put big items first, an easy work-around is to sort twice:

from operator import itemgetter
d.sort(key=itemgetter(0))
d.sort(key=itemgetter(1),reverse=True)
which works because python's sorting is stable.

4. sum & len
>>>sum([0,1,2])  
3  
>>> sum((2, 3, 4), 1)        # 元组计算总和后再加 1
10
>>> sum([0,1,2,3,4], 2)      # 列表计算总和后再加 2
12

Python len() 方法返回对象（字符、列表、元组等）长度或项目个数。
>>>str = "runoob"
>>> len(str)             # 字符串长度
6
>>> l = [1,2,3,4,5]
>>> len(l)               # 列表元素个数
5

5. map
>>> arr = map(int,input().split())
1 2 3
>>> type(arr)
<class 'map'>



6. * and ** usage:
The single star * unpacks the sequence/collection into positional arguments, so you can do this:

def sum(a, b):
    return a + b

values = (1, 2)

s = sum(*values)
This will unpack the tuple so that it actually executes as:

s = sum(1, 2)
The double star ** does the same, only using a dictionary and thus named arguments:

values = { 'a': 1, 'b': 2 }
s = sum(**values)
You can also combine:

def sum(a, b, c, d):
    return a + b + c + d

values1 = (1, 2)
values2 = { 'c': 10, 'd': 15 } # must 'c' and 'd' same as sum paras
s = sum(*values1, **values2)
will execute as:

s = sum(1, 2, c=10, d=15)


7. https://www.hackerrank.com/challenges/symmetric-difference/problem
very good example for introduction the functions of set

https://www.programiz.com/python-programming/methods/built-in/sorted
set sorted reference

set s size: len(s)

https://www.hackerrank.com/challenges/py-set-discard-remove-pop/problem?h_r=next-challenge&h_v=zen&h_r=next-challenge&h_v=zen
set remove and discard difference

set a, b union:
a.union(b) or a|b

set a, b intersection:
a.intersection(b) or a&b

set a, b difference:
a.difference(b) or a - set(b)

set a, b symmetric difference:
a.symmetric_difference(b) or a^set(b)

extend:
.update() |=
.intersection_update() &=
.difference_update() -=
.symmetric_difference_update() ^=

8. enumerate, yield





9. Counter example pls refer to example The_Captain_Room.py

c = Counter(lst)

for k,v in c.items():
    if v == 1:
        print(k)


10. issuperset and issubset
pls refer to Check_Strict_Superset.py file


11. math pow

print(a**b)
print(a**b%m)
#print(pow(a,b))
#print(pow(a,b,m))


12. Integers
Integers in Python can be as big as the bytes in your machine's memory. There is no limit in size as there is: 2^31-1 (c++ int) or 2^63-1 (C++ long long int).



13. itertools combinations and combinations_with_replacement


>>> A = [1,1,3,3,3]
>>> print list(combinations(A,2))
[(1, 1), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (1, 3), (3, 3), (3, 3), (3, 3)]


14. Built-in functions

Zipped:
>>> print zip([1,2,3,4,5,6],'Hacker')
[(1, 'H'), (2, 'a'), (3, 'c'), (4, 'k'), (5, 'e'), (6, 'r')]
>>> 
>>> print zip([1,2,3,4,5,6],[0,9,8,7,6,5,4,3,2,1])
[(1, 0), (2, 9), (3, 8), (4, 7), (5, 6), (6, 5)]

two-dimensional array sort:
1)
sorted(li,key=lambda l:l[1], reverse=True)
[[2, 0.39], [4, 0.31], [5, 0.27], [1, 0.23]]
2)
from operator import itemgetter
outputlist = sorted(inputlist, key=itemgetter(1), reverse=True)


Any or All:
>>> any([1>0,1==0,1<0])
True
>>> all(['a'<'b','b'<'c'])
True

palindromic integer 回文的整数

>>> s = 'abc'
>>> sorted(s)
['a', 'b', 'c']
>>> 
after sorted, string change to list


15. map and split()

>>> mp = map(int, input().strip().split())
1 2 3
>>> mp
<map object at 0x105ea6198>

>>> sp = input().strip().split()
1 2 3
>>> sp
['1', '2', '3']
>>> type(sp)
<class 'list'>


16. map, reduce, filter

>> print (list(map(len, ['Tina', 'Raj', 'Tom'])))  
[4, 3, 3] 

>> sum = lambda a, b, c: a + b + c
>> sum(1, 2, 3)
6


>>> l = list(range(10))
>>> l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> l = list(map(lambda x:x*x, l))
>>> l
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> l = list(filter(lambda x: x > 10 and x < 80, l))
>>> l
[16, 25, 36, 49, 64]
>>> 


The reduce() function applies a function of two arguments cumulatively on a list of objects in succession from left to right to reduce it to one value. Say you have a list, say [1,2,3] and you have to find its sum.

>>> reduce(lambda x, y : x + y,[1,2,3])
6
You can also define an initial value. If it is specified, the function will assume initial value as the value given, and then reduce. It is equivalent to adding the initial value at the beginning of the list. For example:

>>> reduce(lambda x, y : x + y, [1,2,3], -3)
3


Python Fraction:
from fractions import Fraction

>>> Fraction(5, 16) - Fraction(1, 4)
Fraction(1, 16)
>>> Fraction(1, 16) * Fraction(3, 16)
Fraction(3, 256)
>>> Fraction(3, 16) / Fraction(1, 8)
Fraction(3, 2)

reference: http://python.jobbole.com/81213/



17. re.compile, re.match and re.search



18. Numpy and Pandas

The NumPy (Numeric Python) package helps us manipulate large arrays and matrices of numeric data.

1)Arrays

A NumPy array is a grid of values. They are similar to lists, except that every element of an array must be the same type.

import numpy

a = numpy.array([1,2,3,4,5])
print a[1]          #2

b = numpy.array([1,2,3,4,5],float)
print b[1]          #2.0

In the above example, numpy.array() is used to convert a list into a NumPy array. The second argument (float) can be used to set the type of array elements.

e.g
arr = numpy.array(arr[::-1],float)

2) shape and reshape
e.g
1 2 3 4 5 6 7 8 9

=>
[[1 2 3]
 [4 5 6]
 [7 8 9]]


lst = list(map(int, input().strip().split()))
array = numpy.array(lst)
#wont change array by using reshape
#print(numpy.reshape(array,(3,3)))
array.shape = (3,3)
print(array)

3) Transpose and Flatten
import numpy

my_array = numpy.array([[1,2,3],
                        [4,5,6]])

print numpy.transpose(my_array)

#Output
[[1 4]
 [2 5]
 [3 6]]

print my_array.flatten()

#Output
[1 2 3 4 5 6]

4) concatenate

e.g

import numpy

array_1 = numpy.array([[1,2,3],[0,0,0]])
array_2 = numpy.array([[0,0,0],[7,8,9]])

print numpy.concatenate((array_1, array_2), axis = 1)   

#Output
[[1 2 3 0 0 0]
 [0 0 0 7 8 9]]


5) zeros and ones
import numpy

print numpy.zeros((1,2))                    #Default type is float
#Output : [[ 0.  0.]] 

print numpy.zeros((1,2), dtype = numpy.int) #Type changes to int
#Output : [[0 0]]


print numpy.ones((1,2))                    #Default type is float
#Output : [[ 1.  1.]] 

print numpy.ones((1,2), dtype = numpy.int) #Type changes to int
#Output : [[1 1]]   


6) Eye and Identity
import numpy
print numpy.identity(3) #3 is for  dimension 3 X 3

#Output
[[ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]


print numpy.eye(8, 7, k = 1)    # 8 X 7 Dimensional array with first upper diagonal 1.

#Output
[[ 0.  1.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  1.  0.  0.  0.]
 [ 0.  0.  0.  0.  1.  0.  0.]
 [ 0.  0.  0.  0.  0.  1.  0.]
 [ 0.  0.  0.  0.  0.  0.  1.]
 [ 0.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.]]


print numpy.eye(8, 7, k = -2)   # 8 X 7 Dimensional array with second lower diagonal 1.



7) Mathematics

e.g

print(*[eval('a1'+i+'a2') for i in ['+','-','*','//','%','**']], sep='\n')

#print([a1+a2])
#=>[array([[ 6,  8, 10, 12]])]

#print(*[a1+a2])
#=>[[ 6  8 10 12]]




8) Floor, Ceil and Rint

floor 
The tool floor returns the floor of the input element-wise. 
The floor of x is the largest integer i where i<=x.

import numpy

my_array = numpy.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])
print numpy.floor(my_array)         #[ 1.  2.  3.  4.  5.  6.  7.  8.  9.]


ceil 
The tool ceil returns the ceiling of the input element-wise. 
The ceiling of x is the smallest integer i where i>=x.

import numpy

my_array = numpy.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])
print numpy.ceil(my_array)          #[  2.   3.   4.   5.   6.   7.   8.   9.  10.]



rint 
The rint tool rounds to the nearest integer of input element-wise.

import numpy

my_array = numpy.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])
print numpy.rint(my_array)          #[  1.   2.   3.   4.   6.   7.   8.   9.  10.]


numpy.set_printoptions(sign=' ')
numpy.set_printoptions(legacy='1.13')




9) Sum and Prod

sum
import numpy

my_array = numpy.array([ [1, 2], [3, 4] ])

print numpy.sum(my_array, axis = 0)         #Output : [4 6]
print numpy.sum(my_array, axis = 1)         #Output : [3 7]
print numpy.sum(my_array, axis = None)      #Output : 10
print numpy.sum(my_array)                   #Output : 10


prod
print numpy.prod(my_array, axis = 0)            #Output : [3 8]
print numpy.prod(my_array, axis = 1)            #Output : [ 2 12]
print numpy.prod(my_array, axis = None)         #Output : 24
print numpy.prod(my_array)                      #Output : 24


10) min and max

min
import numpy

my_array = numpy.array([[2, 5], 
                        [3, 7],
                        [1, 3],
                        [4, 0]])

print numpy.min(my_array, axis = 0)         #Output : [1 0]
print numpy.min(my_array, axis = 1)         #Output : [2 3 1 0]
print numpy.min(my_array, axis = None)      #Output : 0
print numpy.min(my_array)                   #Output : 0


max
import numpy

my_array = numpy.array([[2, 5], 
                        [3, 7],
                        [1, 3],
                        [4, 0]])

print numpy.max(my_array, axis = 0)         #Output : [4 7]
print numpy.max(my_array, axis = 1)         #Output : [5 7 3 4]
print numpy.max(my_array, axis = None)      #Output : 7
print numpy.max(my_array)                   #Output : 7



11) Mean, Var, and Std
mean
The mean tool computes the arithmetic mean along the specified axis.

import numpy

my_array = numpy.array([ [1, 2], [3, 4] ])

print numpy.mean(my_array, axis = 0)        #Output : [ 2.  3.]
print numpy.mean(my_array, axis = 1)        #Output : [ 1.5  3.5]
print numpy.mean(my_array, axis = None)     #Output : 2.5
print numpy.mean(my_array)                  #Output : 2.5


var)(方差)
The var tool computes the arithmetic variance along the specified axis.

import numpy

my_array = numpy.array([ [1, 2], [3, 4] ])

print numpy.var(my_array, axis = 0)         #Output : [ 1.  1.]
print numpy.var(my_array, axis = 1)         #Output : [ 0.25  0.25]
print numpy.var(my_array, axis = None)      #Output : 1.25
print numpy.var(my_array)                   #Output : 1.25


std(标准差或均方差)

The std tool computes the arithmetic standard deviation along the specified axis.

import numpy

my_array = numpy.array([ [1, 2], [3, 4] ])

print numpy.std(my_array, axis = 0)         #Output : [ 1.  1.]
print numpy.std(my_array, axis = 1)         #Output : [ 0.5  0.5]
print numpy.std(my_array, axis = None)      #Output : 1.11803398875
print numpy.std(my_array)                   #Output : 1.11803398875




12) dot and cross

dot
The dot tool returns the dot product of two arrays.

import numpy

A = numpy.array([ 1, 2 ])
B = numpy.array([ 3, 4 ])

print numpy.dot(A, B)       #Output : 11


cross
The cross tool returns the cross product of two arrays.

import numpy

A = numpy.array([ 1, 2 ])
B = numpy.array([ 3, 4 ])

print numpy.cross(A, B)     #Output : -2


13) Inner and Outer
https://blog.csdn.net/dcrmg/article/details/52416832
内积是一个向量在另一向量所在方向上的积，所以叫内积。
外积是一个向量在另一向量的无关方向上的积，所以才叫外积。

Inner
import numpy

A = numpy.array([0, 1])
B = numpy.array([3, 4])

print numpy.inner(A, B)     #Output : 4


Outer
import numpy

A = numpy.array([0, 1])
B = numpy.array([3, 4])

print numpy.outer(A, B)     #Output : [[0 0]
                            #          [3 4]]


Shorting is a concept where you essentially borrow shares from another market participant and later give it back. 
The concept is essentially applied when you have a bearish (believe that the stock prices are likely to go down) 
view on the stock.

DFS

14) Polynomials (多项式)
https://blog.csdn.net/kezunhai/article/details/46271165

poly -- coefficients 系数
roots -- root 根
polyint -- antiderivative 反倒数
polyder -- derivative 倒数
polyval -- evaluates at specific value 求值
polyfit -- fit polynomial by using a least-squares approach (最小二乘法)

print numpy.poly([-1, 1, 1, 10])        #Output : [  1 -11   9  11 -10]
print numpy.roots([1, 0, -1])           #Output : [-1.  1.]
print numpy.polyint([1, 1, 1])          #Output : [ 0.33333333  0.5         1.          0.        ]
print numpy.polyder([1, 1, 1, 1])       #Output : [3 2 1]
print numpy.polyval([1, -2, 0, 2], 4)   #Output : 34
print numpy.polyfit([0,1,-1, 2, -2], [0,1,1, 4, 4], 2)
#Output : [  1.00000000e+00   0.00000000e+00  -3.97205465e-16]

The functions polyadd, polysub, polymul, and polydiv also handle proper 
addition, subtraction, multiplication, and division of polynomial coefficients, respectively.


15) Linear Algebra
https://blog.csdn.net/lanchunhui/article/details/51004387
https://blog.csdn.net/chixujohnny/article/details/51063617
linalg.det()  --- 求矩阵的值 （标量）
linalg.eig()  --- 求矩阵特征向量
linalg.inv()  --- 矩阵求逆



19. append or extend
>>> output = []
>>> output.extend([1,2,3])
>>> output
[1, 2, 3]



20. XML
https://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/processing-xml-in-python-with-element-tree.html
XML1 and XML2 good practice for Recursion

e.g
import xml.etree.ElementTree as etree

maxdepth = 0
def depth(elem, level):
    global maxdepth
    # your code goes here
    for child in elem:
        depth(child, level+1)
    
    if maxdepth < (level+1):
        maxdepth = level+1

if __name__ == '__main__':
    n = int(input())
    xml = ""
    for i in range(n):
        xml =  xml + input() + "\n"
    tree = etree.ElementTree(etree.fromstring(xml))
    depth(tree.getroot(), -1)
    print(maxdepth)


21. Closure and Decorators

http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/

1) Variable resolution rules:
>>> a_string = "This is a global variable"
>>> def foo():
...     a_string = "test" # 1
...     print locals()
>>> foo()
{'a_string': 'test'}
>>> a_string # 2
'This is a global variable'

2) default value:
>>> def foo(x, y=0): # 1
...     return x - y
>>> foo(3, 1) # 2

Nested functions:
>>> def outer():
...     x = 1
...     def inner():
...         print x # 1
...     inner() # 2
...
>>> outer()
1

3) Functions are first class objects in Python:
>>> issubclass(int, object) # all objects in Python inherit from a common baseclass
True
>>> def foo():
...     pass
>>> foo.__class__ # 1
<type 'function'>
>>> issubclass(foo.__class__, object)
True

>>> def add(x, y):
...     return x + y
>>> def sub(x, y):
...     return x - y
>>> def apply(func, x, y): # 1
...     return func(x, y) # 2
>>> apply(add, 2, 1) # 3
3
>>> apply(sub, 2, 1)
1


>>> def outer():
...     def inner():
...         print "Inside inner"
...     return inner # 1
...
>>> foo = outer() #2
>>> foo # doctest:+ELLIPSIS
<function inner at 0x...>
>>> foo()
Inside inner
Explanation:
The function inner is freshly redefined each time the function outer is called but if inner wasn’t returned from the function it would simply cease to exist when it went out of scope.


4) closures:
>>> def outer():
...     x = 1
...     def inner():
...         print x # 1
...     return inner
>>> foo = outer()
>>> foo.func_closure # doctest: +ELLIPSIS
(<cell at 0x...: int object at 0x...>,)

Python supports a feature called function closures which means that inner functions defined in non-global scope remember what their enclosing namespaces looked like at definition time. This can be seen by looking at the func_closure attribute of our inner function which contains the variables in the enclosing scopes.



>>> def outer(x):
...     def inner():
...         print x # 1
...     return inner
>>> print1 = outer(1)
>>> print2 = outer(2)
>>> print1()
1
>>> print2()
2


you might even think of it as similar to object oriented techniques in some ways: outer is a constructor for inner with x acting like a private member variable. 


5) Decorrators

A decorator is just a callable that takes a function as an argument and returns a replacement function. We’ll start simply and work our way up to useful decorators.

>>> def outer(some_func):
...     def inner():
...         print "before some_func"
...         ret = some_func() # 1
...         return ret + 1
...     return inner
>>> def foo():
...     return 1
>>> decorated = outer(foo) # 2
>>> decorated()
before some_func
2

>>> class Coordinate(object):
...     def __init__(self, x, y):
...         self.x = x
...         self.y = y
...     def __repr__(self):
...         return "Coord: " + str(self.__dict__)
>>> def add(a, b):
...     return Coordinate(a.x + b.x, a.y + b.y)
>>> def sub(a, b):
...     return Coordinate(a.x - b.x, a.y - b.y)
>>> one = Coordinate(100, 200)
>>> two = Coordinate(300, 200)
>>> add(one, two)
Coord: {'y': 400, 'x': 400}

>>> def wrapper(func):
...     def checker(a, b): # 1
...         if a.x < 0 or a.y < 0:
...             a = Coordinate(a.x if a.x > 0 else 0, a.y if a.y > 0 else 0)
...         if b.x < 0 or b.y < 0:
...             b = Coordinate(b.x if b.x > 0 else 0, b.y if b.y > 0 else 0)
...         ret = func(a, b)
...         if ret.x < 0 or ret.y < 0:
...             ret = Coordinate(ret.x if ret.x > 0 else 0, ret.y if ret.y > 0 else 0)
...         return ret
...     return checker
>>> add = wrapper(add)
>>> sub = wrapper(sub)
>>> sub(one, two)
Coord: {'y': 0, 'x': 0}
>>> add(one, three)
Coord: {'y': 200, 'x': 100}


6） The @ Symbol applies a decorator to a function

Python 2.4 provided support to wrap a function in a decorator by pre-pending the function definition with a decorator name and the @ symbol. In the code samples above we decorated our function by replacing the variable containing the function with a wrapped version.

>>> add = wrapper(add) 
This pattern can be used at any time, to wrap any function. But if we are defining a function we can "decorate" it with the @ symbol like:

>>> @wrapper
... def add(a, b):   #--- compare with previous one
...     return Coordinate(a.x + b.x, a.y + b.y)

It’s important to recognize that this is no different than simply replacing the original variable add with the return from the wrapper function - Python just adds some syntactic sugar to make what is going on very explicit.
Again - using decorators is easy! Even if writing useful decorators like staticmethod or classmethod would be difficult, using them is just a matter of prepending your function with @decoratorname!

good example:

>>> def logger(func):
...     def inner(*args, **kwargs): #1
...         print "Arguments were: %s, %s" % (args, kwargs)
...         return func(*args, **kwargs) #2
...     return inner

>>> @logger
... def foo1(x, y=1):
...     return x * y
>>> @logger
... def foo2():
...     return 2
>>> foo1(5, 4)
Arguments were: (5, 4), {}
20
>>> foo1(1)
Arguments were: (1,), {}
1
>>> foo2()
Arguments were: (), {}
2



22. sorted by key

>>>a = [5,7,6,3,4,1,2]
>>> b = sorted(a)       # 保留原列表
>>> a 
[5, 7, 6, 3, 4, 1, 2]
>>> b
[1, 2, 3, 4, 5, 6, 7]
 
>>> L=[('b',2),('a',1),('c',3),('d',4)]
>>> sorted(L, cmp=lambda x,y:cmp(x[1],y[1]))   # 利用cmp函数
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]
>>> sorted(L, key=lambda x:x[1])               # 利用key
[('a', 1), ('b', 2), ('c', 3), ('d', 4)]
 
 
>>> students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]
>>> sorted(students, key=lambda s: s[2])            # 按年龄排序
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
 
>>> sorted(students, key=lambda s: s[2], reverse=True)       # 按降序
[('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]



23. Regex and Parsing

1) re.split

regex_pattern = r"[,.]" # Do not delete 'r'.

import re
print("\n".join(re.split(regex_pattern, input())))


2) Group, Groups, Groupdict

group()
>>> import re
>>> m = re.match(r'(\w+)@(\w+)\.(\w+)','username@hackerrank.com')
>>> m.group(0)       # The entire match 
'username@hackerrank.com'
>>> m.group(1)       # The first parenthesized subgroup.
'username'
>>> m.group(2)       # The second parenthesized subgroup.
'hackerrank'
>>> m.group(3)       # The third parenthesized subgroup.
'com'
>>> m.group(1,2,3)   # Multiple arguments give us a tuple.
('username', 'hackerrank', 'com')

groups()
>>> import re
>>> m = re.match(r'(\w+)@(\w+)\.(\w+)','username@hackerrank.com')
>>> m.groups()
('username', 'hackerrank', 'com')

groupdict()
>>> m = re.match(r'(?P<user>\w+)@(?P<website>\w+)\.(?P<extension>\w+)','myname@hackerrank.com')
>>> m.groupdict()
{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}


3）Re.findall() & Re.finditer()

refer RE_findall.py

re.findall()

The expression re.findall() returns all the non-overlapping matches of patterns in a string as a list of strings. 
Code

>>> import re
>>> re.findall(r'\w','http://www.hackerrank.com/')
['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']


re.finditer()
The expression re.finditer() returns an iterator yielding MatchObject instances over all non-overlapping matches 
for the re pattern in the string. 
Code

>>> import re
>>> re.finditer(r'\w','http://www.hackerrank.com/')
<callable-iterator object at 0x0266C790>
>>> map(lambda x: x.group(),re.finditer(r'\w','http://www.hackerrank.com/'))
['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']


small tips:
list empty
if not lst:  #

list compare
https://stackoverflow.com/questions/2587402/sorting-python-list-based-on-the-length-of-the-string


4) start() & end()

>>> import re
>>> m = re.search(r'\d+','1234')
>>> m.end()
4
>>> m.start()
0

# good example for re search
import re

s = input()
k = input()
pattern = re.compile(k)
r = pattern.search(s)
if not r: print("(-1, -1)")
while r:
    print("({0}, {1})".format(r.start(), r.end() - 1))
    r = pattern.search(s,r.start() + 1)


5) Regex Substitution

The re.sub() tool (sub stands for substitution) evaluates a pattern and, 
for each valid match, it calls a method (or lambda). 

import re

#Squaring numbers
def square(match):
    number = int(match.group(0))
    return str(number**2)

print re.sub(r"\d+", square, "1 2 3 4 5 6 7 8 9")
Output

1 4 9 16 25 36 49 64 81


small tips:
* 匹配前一个字符0或无限次
+ 匹配前一个字符1次或无限次
? 匹配前一个字符0次或1次

\d 数字[0-9]
\s 空白字符[<空格>\t\r\n\f\v]
\w 单词字符[A-Za-z0-9_]
以上的用()而不是[]

_不需要转义字符\， -和.需要转义字符\


multiple condition:
# very good example. Thanks Tom!
# multiple condition use multiple re.search instead of re.match 
import re

for _ in range(int(input())):
    u = ''.join(sorted(input()))
    try:
        assert re.search(r'[A-Z]{2}', u)
        assert re.search(r'\d\d\d', u)
        assert not re.search(r'[^a-zA-Z0-9]', u)
        # no repeating character
        assert not re.search(r'(.)\1', u)
        assert len(u) == 10
    except:
        print('Invalid')
    else:
        print('Valid')


e.g

import re 

s = "" # s = ''''''
for i in range(int(input())):
    s += str(input()) + '\n'
s = re.sub(r'(?<= )&&(?= )', 'and', s)
s = re.sub(r'(?<= )\|\|(?= )', 'or', s)
    
print (s)


6) HTMLParser

.handle_starttag(tag, attrs)

This method is called to handle the start tag of an element. (For example: <div class='marks'>) 
The tag argument is the name of the tag converted to lowercase. 
The attrs argument is a list of (name, value) pairs containing the attributes found inside the tag’s <> brackets. 


.handle_endtag(tag)

This method is called to handle the end tag of an element. (For example: </div>) 
The tag argument is the name of the tag converted to lowercase. 


.handle_startendtag(tag,attrs)

This method is called to handle the empty tag of an element. (For example: <br />) 
The tag argument is the name of the tag converted to lowercase. 
The attrs argument is a list of (name, value) pairs containing the attributes found inside the tag’s <> brackets.

e.g
from HTMLParser import HTMLParser

# create a subclass and override the handler methods
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print "Found a start tag  :", tag
    def handle_endtag(self, tag):
        print "Found an end tag   :", tag
    def handle_startendtag(self, tag, attrs):
        print "Found an empty tag :", tag

# instantiate the parser and fed it some HTML
parser = MyHTMLParser()
parser.feed("<html><head><title>HTML Parser - I</title></head>"
            +"<body><h1>HackerRank</h1><br /></body></html>")







.handle_comment(data) 
This method is called when a comment is encountered (e.g. <!--comment-->). 
The data argument is the content inside the comment tag:

e.g
from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self, data):
          print "Comment  :", data


.handle_data(data) 
This method is called to process arbitrary data (e.g. text nodes and the content of <script>...</script> and <style>...</style>). 
The data argument is the text content of HTML.

e.g
from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_data(self, data):
        print "Data     :", data


/   除 - x除以y    b / a 输出结果 2
//  取整除 - 返回商的整数部分（向下取整）    9//2 输出结果 4 , 9.0//2.0 输出结果 4.0



24. python 2 raw_input() and python 3 input()








